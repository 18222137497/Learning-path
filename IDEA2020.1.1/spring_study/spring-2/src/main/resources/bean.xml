<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
<!--    spring中的依赖注入
        依赖注入:
            Dependency Injection
        IOC的作用:
            降低程序间的耦合(依赖关系)
        依赖关系的管理:
            以后都交给spring来维护
        在当前类需要用到其他类的对象,由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护:
            就称之为依赖注入
        依赖注入:
            能注入的数据:有三类、
                基本类型和String
                其他bean类型(在配置文件中挥着注解配置过的bean)
                复杂类型/集合类型
            注入的方式:有三种
                第一种:使用构造函数提供
                第二种:使用set方法提供
                第三种:使用注解提供
-->
<!--    构造函数注入
        使用标签:constructor-arg
        标签出现的位置:bean标签的内部
        标签中的属性:
            type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置从0开始
            name:用于指定给构造函数中指定名称的参数赋值               常用的
            ==================以上三个用于指定给构造函数中那个参数赋值==========================
            value:用于提供基本类型和String类型的数据
            ref:用于指定其他的bean类型数据，他指的就是在spring的ioc核心容器中出现过的bean对象
        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
        弊端：
            改变了bean独享的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供
-->
    <bean id="accountService" class="com.wang.service.imp.AccountServiceImpl" scope="singleton">
        <constructor-arg name="name" value="汪京"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="date"></constructor-arg>
    </bean>
    <!--    配置一个日期对象-->
    <bean id="date" class="java.util.Date"></bean>

<!--    set方法注入           更常用的方法
        涉及的标签:property
        出现的位置:bean标签内部
        标签的属性:
            name:用于指定注入时所调用的set方法名称
            value:用于提供基本类型和String类型的数据
            ref:用于指定其他的bean类型数据，他指的就是在spring的Ioc核心容器中出现过的bean对象
        优势:
            创建对象时没有明确的限制，可以直接使用默认构造函数
        弊端:
            如果有某个成员必须有值，则获取独享是有可能set方法没有执行
-->
    <bean id="accountService1" class="com.wang.service.imp.AccountServiceImpl1">
        <property name="name" value="test"></property>
        <property name="age" value="18"></property>
        <property name="birthday" ref="date"></property>
    </bean>

<!--    复杂类型的注入/集合类型的注入
        用于给List结构集合注入的标签:
            list array set
        用于给Map结构集合注入的标签:
            map props
        结构相同，标签可以互换
-->
    <bean id="accountService2" class="com.wang.service.imp.AccountServiceImpl2">
        <property name="arr">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="list">
            <list>
                <value>AAA</value>
                <value>AAA</value>
                <value>AAA</value>
            </list>
        </property>
        <property name="strings">
            <set>
                <value>AAA</value>
                <value>AAA</value>
                <value>AAA</value>
            </set>
        </property>
        <property name="map">
            <map>
                <entry key="一" value="1"></entry>
                <entry key="二">
                    <value>2</value>
                </entry>
                <entry key="三" value="3"></entry>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="一">一</prop>
                <prop key="二">二</prop>
                <prop key="三">三</prop>
            </props>
        </property>
    </bean>
</beans>
package com.tarena.yadx.memory;
/**
 * 对象内存管理
 * @author 123
 *
 */
public class TestMemory {
	/*
	 * 一.对象内存管理
	 *   1.编译好的java程序需要运行在jvm中
	 *   2.程序无论是代码还是数据都需要存储在内存中 ！jvm为java程序提供并管理所需要的空间
	 *   3.jvm内存分为"堆"和"栈"和"方法区"三个区域分别存储不同的数据
	 * 二.堆内存                                             
	 *   1.对象存储在堆中                                            实例化对象
	 *     -jvm在其内存空间中开辟了一个称为堆的存储空间          person p=new person();
	 *     -这部分空间用于存储使用new关键字所创建的对象                 |   {  |         }
	 *   2.成员变量的声明周期                                          |      |      
	 *     -访问对象需要依靠引用                                     引用   对象  
	 *     -当一个对象没有任何引用时，被视为废弃对象，属于被回收的范围该对象中所有的成员
	 *      变量也会被回收。
	 *     -成员变量的生命周期为：从对象在堆中创建开始到对象从堆中被回收结束
	 *   3.垃圾回收机制
	 *     -垃圾回收器（Garbage Collection,GC）是jvm自带的一个线程（自动运行这的程序），
	 *      用于回收没有任何引用指向的对象
	 *     -java程序员不用担心内存管理，因为垃圾回收器会自动的进行回收管理
	 *   4.java程序的内存泄漏问题
	 *     -内存泄漏是指不再使用的内存没有被及时回收，严重的内存泄漏会因为过多的内存占用
	 *      而是程序面临崩溃
	 *     -GC线程判断对象是否可以回收的依据是该对象是否有引用指向，因此当确定该对象不再
	 *      被使用时应该及时将引用设置为null
	 *   5.System.gc()方法
	 *     -GC的回收对程序员来说是透明的并不一定发现有无引用的对象就立即回收
	 *     -一版情况下当我们需要GC线程立刻马上回收无用的对象时，调用System.gc()方法
	 *     -System.gc()用于建议虚拟机马上调度GC线程回收资源，具体的实现策略取决于不同的
	 *      jvm系统
	 * 三.非堆-栈           
	 *     1.站用于存放方法中的局部变量
	 *       -jvm在其内存空间开辟一个称为栈的存储空间
	 *       -这部分空间用于存储程序运行时在方法中生命所有局部变量
	 *     2.局部变量的生命周期
	 *       -一个运行的java程序从开始到结束会有多次的方法调用，jvm会为每一个方法的调用
	 *        在栈中分配一块对应的空间，这个空间叫做该方法的栈帧
	 *       -一个栈帧对应一个正在调用的方法，栈帧中存储了该方法的参数、局部变量的数据。当
	 *        某一个方法调用完成后其对应的栈帧将被清除，局部变量失效   
	 *     3.成员变量和局部变量的差别如下：
	 *          -局部变量：
	 *             -定义在方法中；
	 *             -没有默认值，必须赋值
	 *             -方法被调用时，存在栈中，方法调用用结束后，从栈中清楚
	 *          -成员变量：
	 *             -定义在类中，方法外
	 *             -有默认的初始值，不一定赋值
	 *             -所在类被实例化后，存在堆中，对象被回收时，成员变量失效
	 * 四.非堆-方法区
	 *    1.方法用于存放类的信息
	 *      -方法区用于存放类的信息，java运行时，首先会通过类加载器，载入类文件的字节码信息，
	 *       经过解析后将其装入方法区，类的各种信息，包括方法都在方法区中存储                
	 *    2.方法只有一份
	 *      -当类的信息被加载到方法区时，除了类的类型信息外，同时类内的方法也定义在方法区内
	 *      -类在实例化对象时，多个对象会拥有各自在堆中的空间，但所有的实例对象是共用方法区
	 *       的一份方法定义的                    
	 */
	
	int i=0;//成员变量
	public static void main(String[] args) {
		new TestMemory();
		
		int i=0;//局部变量
		System.gc();//GC方法-立即回收垃圾资源
	
	}

}
